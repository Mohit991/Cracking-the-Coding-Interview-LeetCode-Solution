class Solution:
    def missingNumber(self, nums: List[int]) -> int:
        memo = [False]*(len(nums)+1)
        
        for n in nums:
            memo[n] = True
            
        for i in range(len(memo)):
            if memo[i] == False:
                return i
            
#########################################################

class Solution:
    def missingNumber(self, nums: List[int]) -> int:
        n = len(nums)
        totalSum = 0
        for i in range(n+1):
            totalSum += i
            
        arraySum = 0
        for number in nums:
            arraySum += number
            
        return totalSum - arraySum    
            
        
###############################################################

Solution 1:
Time: O(n)
Space: O(1)
We can use the total sum property to work out the missing number:


def missingNumber(self, nums: List[int]) -> int:
  n = len(nums)
  return ((n * (n+1)) // 2 ) - sum(nums) # Get sum of complete series(Gaussian formula) and find the difference between sum of given series
       
Intution:

The Gaussian formula(above) is used to work out the sum of a series given the length.

The reason we find the difference can be hightlighted by the following example

completeSeries = [1,2,3,4,5,6] (sum = 21)
givenNumsList =  [1,2,3, ,5,6] (sum = 17)
Perform the subtraction

completeSeries = [1,2,3,4,5,6] (sum = 21)
-
givenNumsList  = [1,2,3, ,5,6] (sum = 17)

subtraction    = [0,0,0,4,0,0] (sum = 4)

Solution 2:
Time: O(n)
Space: O(1)

We can use the XOR operator to work out the missing number:

def missingNumber(self, nums: List[int]) -> int:
    
    result = 0
    
    for counter,value in enumerate(nums):
        
        result ^= counter+1 # XOR result with numbers from the complete series
        result ^= value # XOR with the numbers given in num series
        
    return result

Intution:

XOR is a bitwise operation.
The output is true when two values are not the same (exclusive) E.g 1^0 = 1 , 1^1 =0 , 2^0 = 2 , 2^2 = 0.
Value that is XOR with itself is 0
With XOR, you can rearrange the numbers to get the following pattern

1^1 = 0
1^0 = 1

1^1 = 0
0^1 = 1

For the fun part, XOR operations are commutative :

1^1^2 == (1^1)^2 == (2^1)^1 == 2

Order does not mater when you use XOR, if there are two instances of the same number, the XOR operations cancel each other out to get 0

result = 3

result ^= 5

result ^= 6

result ^= 3

result ^= 6

result ^= 5

The result variable is 0 as 3^5^6^3^6^5 == (3^3) ^ (5^5) ^ (6^6) == 0

Back to the code!

We are essentially doing XOR of the complete sequence with the result variable. Then we XOR result with each number from the numList .
Same values from complete sequence and numList cancel each other and the missing number manifests iteself.

# Simple break down of above XOR solution

numsList = [3,0,1] # Missing number is 2

result = 0 

#XOR result with complete number sequence
for number in range(len(numsList) + 1 ) : # 0, 1, 2 ,3
		result ^= number
		
# Essentially now result = ( 0 ^ 0 ^ 1 ^ 2 ^ 3)

#XOR result with values in nums
for num in numsList : # 3,0,1
		result ^= num
		
# result = ( 0 ^ 0 ^ 1 ^ 2 ^ 3) ^ ( 3 ^ 0 ^ 1)

# XOR of same values cancel each other out 

# result = (0) ^ (0 ^ 0)  ^ (1^1) ^ (2) ^ (3^3)
# result =  0 ^ 0 ^ 0 ^ 2 ^ 0
# result = 2

return result # 2
        
        
