# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

#Solution using min and max values

class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        def validateBST(node, min, max):
            if not node: return True
            # if not min<node.val<max: return False
            #above condition and below condition are both same
            if not (node.val > min and node.val < max):
                return False
            if validateBST(node.left, min, node.val) and validateBST(node.right, node.val, max): return True
            return False
        
        return validateBST(root, -math.inf, math.inf)     
    
############################################################################################


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        #We can use inorder traversal
        #Inorder traversal always gives a sorted array. 
        #Step 1: Find inorder traversal
        #Step 2: Check is inorder traversal is sorted array or not.
        nodes = []
        def inorder(root):
            if not root: return 
            inorder(root.left)
            nodes.append(root.val)
            inorder(root.right)
            
        inorder(root)
        isBst = True
        for i in range(1, len(nodes)):
            if nodes[i-1]>nodes[i]:
                isBst = False
        return isBst
    #This solution works fine for all the BSTs which do not contain any duplicate values. 
    #If there are duplicate values then this solution fails. 
        
