You will be able to understand the solution using the comments. 
Let me know if any questions. 


class Solution:
    def countHillValley(self, nums: List[int]) -> int:
        hillValley  = 0 
		
		#Here we will keep track of the left neighbour 
        #Initially left neighbour is the 0th element. 
        leftNeighbour = nums[0]
        
        #We will apply a loop from 1st index to second last index becuase for any element to be a 
        #hill or a valley it must have both neighbours. 
        for i in range(1, len(nums) - 1):
            
            #If both the left neighbour and right element are greater that it is a valley.
            #We incerement count and also we will update the left neighbour to current element. 
            if nums[i]<nums[i+1] and nums[i]<leftNeighbour:
                leftNeighbour = nums[i]
                hillValley  += 1
            
            #If both the left neighbour and right element are smaller that it is a hill.
            #We incerement count and also we will update the left neighbour to current element. 
            if nums[i]>nums[i+1] and nums[i]>leftNeighbour:
                leftNeighbour = nums[i]
                hillValley  += 1
                
        return hillValley
	
############################################################################################################

class Solution:
    def countHillValley(self, nums: List[int]) -> int:
        #Here we will keep track of the left neighbour 
        hillValley  = 0 
        #Initially left neighbour is the left 0th element. 
        leftNeighbour = nums[0]
        
        #We will apply a loop from 1st index to second last index becuase for any element to be a 
        #hill or a valley it must have both neighbours. 
        for i in range(1, len(nums) - 1):
            
            #If both the left neighbour and right element are greater that it is a valley.
            if nums[i]<nums[i+1] and nums[i]<leftNeighbour:
                hillValley  += 1
            
            #If both the left neighbour and right element are smaller that it is a hill. 
            if nums[i]>nums[i+1] and nums[i]>leftNeighbour:
                hillValley  += 1
            
            #If current element and next element are not same then current element will be the 
            #left neighbour for next element
            #If not then the old left neighbour will continue.            
            if nums[i] != nums[i+1]:
                leftNeighbour = nums[i]
                
        return hillValley 
	
