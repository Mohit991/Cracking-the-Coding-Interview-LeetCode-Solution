####  If we are allowed multiple passes
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:

        #if there is only one element in the list then n must be 1 based on input condtions.
        #so we simply return None. 
        if head.next == None: return None
        
        length = 0 
        temp = head
        #lets count the length of the LL
        while temp != None:
            length += 1
            temp = temp.next
        
        #Position denoates the location of the node whose next node has to be deleted.
        position = length - n
        
        #if we have to delete the first node then position = 0, that means we have to delete the 1st node
        if position == 0:
            head = head.next
            return head
        
        #if we have to delete any other node then we get to the node behind that node and delete that node. 
        t = head
        for i in range(1, position):
            t = t.next
        t.next = t.next.next
        
        return head
        
        
 ###############################################################################################################################
 #Using Single pass with recursion
 class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:        
        if head.next == None: return None
        def nthToLast(current):
            if current == None:
                return 0
            counter = nthToLast(current.next)
            if counter == n:
                current.next = current.next.next
            return counter+1
        
        #if we want to delete the first node from the list then simply passing head to nthToLast() will fail.
        #we need some dummy node at the front to avoid that. So, we are using the dummy as below. 
        dummy = ListNode()
        dummy.next = head
        x = nthToLast(dummy) 
        return dummy.next
        
###############################################################################################################################
#Using Single Pass With Two Pointers:
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        #if you want to do it in one pass
        if head.next == None: return None
        fast = head
        slow = head
        prev = None
        for i in range(n):
            fast = fast.next
        
        #this means that we have to delete the first node ie the head 
        if fast == None:
            head = head.next
            return head
        
        while fast != None:
            prev = slow
            slow = slow.next
            fast = fast.next
        
        #if we dont use above condition to check if we want to delete the firat node then we can use this condition.             #this also means that we have to delete the first node ie the head
        # if prev == None:
        #     head = head.next
        #     return head
        
        prev.next = slow.next
        return head

        
