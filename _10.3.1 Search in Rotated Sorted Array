class Solution:
    def search(self, nums: List[int], target: int) -> int:
        left = 0 
        right = len(nums) - 1
        
        while left <= right:
            mid = (left+right)//2
            
            #You got the element 
            if nums[mid] == target:
                return mid
            
            #If you look closely you will notice that after rotation when u find the mid
            #one part of the array will be sorted always. Either the left part or the
            #right part. 
            
            #Check if the left part is sorted.
            if nums[left] <= nums[mid]:
                #If it is then check if your element lies in the left sorted array.
                if nums[left] <= target < nums[mid]:
                    #if yes go to left
                    right = mid - 1
                else:
                    #if no go to right
                    left = mid + 1  
            #If left part is not sorted then right must be sorted.         
            else:
                #Check if your element lies in the right sorted array.
                if nums[mid] < target <= nums[right]:
                    #if yes go to right
                    left = mid + 1
                else:
                    #if no go to left
                    right = mid - 1
                    
        #if element not found return -1     
        return -1    
    
    
 ###########################################################################################

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        left = 0
        right = len(nums) - 1
        
        #First we will find the index of the smallest element using binary search
        #As we know one part of the array left to mid and mid to right, is always
        #going to be sorted, hence we move towards the other side.
        #when left == right then we have found the mid and we come out.
        while left<right:
            
            mid = (left+right)//2
            
            if nums[mid] > nums[right]:
                left = mid + 1
            else:
                right = mid 
        
        #Rotation tells us by how much the array has been rotated. 
        rotation = left
        
        left, right = 0 , len(nums) - 1
        
        #Now apply the binary search along with the rotation. 
        while left<=right:
            mid = (left+right)//2
            realMid = (mid + rotation) % len(nums)
            
            if nums[realMid] == target:
                return realMid
            
            if nums[realMid] < target:
                left = mid + 1
            else:
                right = mid - 1
                       
        return -1
    
    
 ######################################################################

#Using Recursion

class Solution:
    def search(self, nums: List[int], target: int) -> bool:
        def binarySearch(left, right, target):
            mid = (left + right)//2
            
            if nums[mid] == target: return mid
            
            if left > right:
                return -1
            
            if nums[left] <= nums[mid]:
                if nums[left] <= target < nums[mid]:
                    return binarySearch(left, mid-1, target)
                else:
                    return binarySearch(mid+1, right, target)
                    
            else:
                if nums[mid] < target <= nums[right]:
                    return binarySearch(mid+1, right, target)
                
                else:
                    return binarySearch(left, mid-1, target)
            
        return binarySearch(0, len(nums)-1, target)  
                    
                    
        
                
                
                
            
                    
        
        
    
                    
                    
                
        
        
