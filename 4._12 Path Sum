1. Brute Force: O(nlogn) ~ O(n^2)
1.1 High level walk-through:
(Define return) Define a global var: self.numOfPaths in the main function.
(1st layer DFS) Use recursive traverse to go through each node (can be any order: pre, in, post all fine).
(2nd layer DFS) For each node, walk all paths. If a path sum equals to the target: self.numOfPaths += 1
Return result: return self.numOfPaths
1.2 Complexity analysis
1.2.1 Space
Space complexity is O(1), due to there is no extra cache. However, for any recursive question, we need to think about stack overflow, namely the recursion should not go too deep.
Assume we have n TreeNodes in total, the tree height will vary from O(n) (single sided tree) to O(logn)(balanced tree).
The two DFS will go as deep as the tree height.
1.2.2 Time
Time complexity depends on the two DFS.
1st layer DFS will always take O(n), due to here we will take each node out, there are in total n TreeNodes
2nd layer DFS will take range from O(n) (single sided tree) to O(logn)(balanced tree). This is due to here we are get all the paths from a given node. The length of path is proportional to the tree height.
Therefore, the total time complexity is O(nlogn) to O(n^2).

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:
        #If there is no root then we simply return false because with root = None
        #no target sum is possible at all.
        if not root:
            return False
        
        #Here if for some node left child is none and right child is none and also the value at root 
        #is equal to target sum that means we have found a branch which gives us a total sum
        #equal to target sum. 
        #Keep in mind that we never go after the leef node ie root will never be None 
        #because we stop at any node whose left and right child are none. 
        #So the top condition is only true iff the root of the entire tree is None. 
        if not root.left and not root.right and targetSum == root.val:
            return True
        
        #We decrase the targetSum by the root value
        targetSum -= root.val
        
        #if left or right branch gives us true the return tre else return false.
        #if both give false that means that target sum is not possible and we return false.
        return self.hasPathSum(root.left, targetSum) or self.hasPathSum(root.right, targetSum)

###############################################################################################################
2. Memorization of path sum: O(n)
2.1 High level walk through
In order to optimize from the brutal force solution, we will have to think of a clear way to memorize the intermediate result.
Namely in the brutal force solution, we did a lot repeated calculation. For example 1->3->5, we calculated: 1, 1+3, 1+3+5, 3, 3+5, 5.
This is a classical 'space and time tradeoff': 
we can create a dictionary (named cache) which saves all the path sum (from root to current node) and their frequency.
Again, we traverse through the tree, at each node, we can get the currPathSum (from root to current node).
If within this path, there is a valid solution, then there must be a oldPathSum such that currPathSum - oldPathSum = target.
We just need to add the frequency of the oldPathSum to the result.
During the DFS break down, we need to -1 in cache[currPathSum], because this path is not available in later traverse.
Check the graph below for easy visualization.
image
2.2 Complexity analysis:
2.2.1 Space complexity
O(n) extra space

2.2.1 Time complexity
O(n) as we just traverse once


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:
        self.count = 0
        self.pathCount = {}
        def dfs(root, targetSum, currentSum):
            if root == None:
                return 
            
            currentSum += root.val
            
            if currentSum == targetSum:
                self.count += 1
            
            if currentSum - targetSum in self.pathCount:
                self.count += self.pathCount[currentSum - targetSum]
                
            if currentSum in self.pathCount:
                self.pathCount[currentSum] += 1
            else:
                self.pathCount[currentSum] = 1
                
            dfs(root.left, targetSum, currentSum)
            dfs(root.right, targetSum, currentSum)
            self.pathCount[currentSum] -= 1

                
        dfs(root, targetSum, 0)
        return self.count    
        
