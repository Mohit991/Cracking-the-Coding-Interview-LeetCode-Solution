I have written four different ways to solve this problem.

Using simple recursion
Using recursion with DP(using dictionary)
Using recursion with DP(using static array)
Using bottom up approch using DP


class Solution:
    #This solution works but is very slow. 
    def tribonacci(self, n: int) -> int:
        if n == 0:
            return 0 
        if n == 1 or n == 2:
            return 1
        return self.tribonacci(n-1) + self.tribonacci(n-2) + self.tribonacci(n-3)
    
    
    
class Solution:
    def tribonacci(self, n: int) -> int:
        #This solution works and it uses DP. 
        #This solution uses memoization technique and recursion
         #Here I use a map for memoization.
        def findTribonacci(n, memo):
            if n in memo:
                return memo[n]
            if n == 0:
                memo[0] = 0
                return 0 
            if n == 1 or n == 2:
                memo[1] = 1
                memo[2] = 1
                return 1
            
            memo[n] = findTribonacci(n-1, memo) + findTribonacci(n-2, memo) + findTribonacci(n-3, memo)
            return memo[n]
        
        return findTribonacci(n, {})



class Solution:
    def tribonacci(self, n: int) -> int:
        #This solution works and it uses DP. 
        #This solution uses memoization technique and recursion
         #Here I use a static array for memoization.
        def findTribonacci(n, memo):
            if memo[n] != -1:
                return memo[n]
            if n == 0:
                return 0 
            if n == 1 or n == 2:
                return 1
            
            memo[n] = findTribonacci(n-1, memo) + findTribonacci(n-2, memo) + findTribonacci(n-3, memo)
            return memo[n]
        
        memo = [-1] * (n+1) 
        return findTribonacci(n, memo)




class Solution:
    def tribonacci(self, n: int) -> int:
        if n == 0: return 0
        if n == 1 or n == 2: return 1
        
        #This solution works and it also uses DP. 
        #This solution uses tabulation technique and bottom up approch. 
        memo = [0] * (n+1)
        memo[1] = 1
        memo[2] = 1
        
        for i in range(3, n+1):
            memo[i] = memo[i-1] + memo[i-2] + memo[i-3]
            
        return memo[n]  
