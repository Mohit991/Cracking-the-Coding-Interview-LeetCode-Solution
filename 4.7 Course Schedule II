# Topological Sort is Easy -- The General Template
# 
# What we need ?
# 1. Map inDegree: A in-degree map, which record each nodes in-degree.
# 2. Map graph: A graph map which record the Node's children

# What we do ?
# 1. Init: Init the two Maps.
# 2. Build Map: Put the child into parent's list ; Increase child's in-degree by 1.
# 3. Find Node with 0 in-degree: Iterate the inDegree map, find the Node has 0 inDegree. 
# (If none, there must be a circle)
# 4. Decrease the children's inDegree by 1: Decrease step3's children's inDegree by 1. 
# 5. Remove this Node: Remove step3's Node from inDegree. Break current iteration.
# 6. Do 3-5 until inDegree is Empty: Use a while loop

# class Solution:
#     def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
#         inDegree = {}
#         graph = defaultdict(list)
        
#         for course in range(numCourses):
#             inDegree[course] = 0
            
#         for prereq in prerequisites:
#             currentCourse = prereq[0]
#             preCourse = prereq[1]
#             graph[preCourse].append(currentCourse)
#             inDegree[currentCourse] += 1
            
#         res = []
#         while(inDegree):
#             flag = False
#             for key in inDegree:
#                 if inDegree[key] == 0:
#                     res.append(key)
#                     for edge in graph[key]:
#                         inDegree[edge] -= 1
#                     inDegree.pop(key)
#                     flag = True
#                     break
#             if not flag:
#                 return []
            
#         return res     
                    

class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        inDegree = {}
        graph = defaultdict(list)
        
        for course in range(numCourses):
            inDegree[course] = 0
            
        for prereq in prerequisites:
            currentCourse = prereq[0]
            preCourse = prereq[1]
            graph[preCourse].append(currentCourse)
            inDegree[currentCourse] += 1
            
        res = []
        q = []
        for course in inDegree:
            if inDegree[course] == 0:
                q.append(course)
                res.append(course)
                
        while q:
            course = q.pop()
            for dependentCourses in graph[course]:
                inDegree[dependentCourses] -= 1
                if inDegree[dependentCourses] == 0:
                    q.append(dependentCourses)
                    res.append(dependentCourses)
                    
                    
        if len(res) == numCourses:
            return res
        else:
            return []
                    
        
